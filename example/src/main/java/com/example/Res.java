package com.example;

import java.io.InputStream;
import java.lang.ClassLoader;
import java.lang.IndexOutOfBoundsException;
import java.lang.Math;
import java.lang.String;
import java.net.URL;
import java.util.Objects;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * Do not edit this file.
 * This file is generated automatically and if it is edited it may stop working correctly.
 */
public final class Res {

	/**
	 * Current application context loader
	 */
	private static final ClassLoader $systemClassLoader$ = ClassLoader.getSystemClassLoader();

	/**
	 * $systemClassLoader$
	 */
	public static final int $systemclassloader$ = 0;

	/**
	 * 1_invalid_java_constant.html
	 */
	public static final int $1_invalid_java_constant_html = 1;

	/**
	 * icons/1picture_invalid.png
	 */
	public static final int icons_1picture_invalid_png = 2;

	/**
	 * icons/icon with spaces.svg
	 */
	public static final int icons_icon_with_spaces_svg = 3;

	/**
	 * icons/icon.svg
	 */
	public static final int icons_icon_svg = 4;

	/**
	 * ini/base.ini
	 */
	public static final int ini_base_ini = 5;

	/**
	 * this
	 */
	public static final int $this$ = 6;

	/**
	 * this.txt
	 */
	public static final int this_txt = 7;

	/**
	 * UPERCASE_FILE.txt
	 */
	public static final int upercase_file_txt = 8;

	/**
	 * xml/configuration.xml
	 */
	public static final int xml_configuration_xml = 9;

	private static final String[] $magicArrayContent$ = new String[]{
			"$systemClassLoader$", "1_invalid_java_constant.html", "icons/1picture_invalid.png", "icons/icon with spaces.svg",
			"icons/icon.svg", "ini/base.ini", "this", "this.txt",
			"UPERCASE_FILE.txt", "xml/configuration.xml",};

	@Nullable
	public static URL getResource(@NotNull String location) {
		return $systemClassLoader$.getResource(location);
	}

	@Nullable
	public static InputStream getResourceAsStream(@NotNull String location) {
		return $systemClassLoader$.getResourceAsStream(location);
	}

	@NotNull
	public static URL getRegisteredResource(int resourceId) {
		resourceId = Math.abs(resourceId);
		if (resourceId > $magicArrayContent$.length) {
			throw new IndexOutOfBoundsException("Resource " + resourceId + " not found");
		}
		URL res = getResource($magicArrayContent$[resourceId]);
		Objects.requireNonNull(res, "Resource " + $magicArrayContent$[resourceId] + " not found");
		return res;
	}

	@NotNull
	public static InputStream getRegisteredResourceAsStream(int resourceId) {
		resourceId = Math.abs(resourceId);
		if (resourceId > $magicArrayContent$.length) {
			throw new IndexOutOfBoundsException("Resource " + resourceId + " not found");
		}
		InputStream res = getResourceAsStream($magicArrayContent$[resourceId]);
		Objects.requireNonNull(res, "Resource " + $magicArrayContent$[resourceId] + " not found");
		return res;
	}

}
